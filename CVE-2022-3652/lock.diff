diff --git a/src/compiler/js-create-lowering.cc b/src/compiler/js-create-lowering.cc
index 4cc0a9a3af4..9cee701a56f 100644
--- a/src/compiler/js-create-lowering.cc
+++ b/src/compiler/js-create-lowering.cc
@@ -25,6 +25,7 @@
 #include "src/objects/js-regexp-inl.h"
 #include "src/objects/objects-inl.h"
 
+volatile intptr_t mylock = 0;
 namespace v8 {
 namespace internal {
 namespace compiler {
@@ -1096,6 +1097,7 @@ Reduction JSCreateLowering::ReduceJSCreateLiteralArrayOrObject(Node* node) {
   CreateLiteralParameters const& p = n.Parameters();
   Effect effect = n.effect();
   Control control = n.control();
+  while (mylock != 1 && mylock!=2);
   ProcessedFeedback const& feedback =
       broker()->GetFeedbackForArrayOrObjectLiteral(p.feedback());
   if (!feedback.IsInsufficient()) {
@@ -1824,6 +1826,7 @@ base::Optional<Node*> JSCreateLowering::TryAllocateFastLiteral(
   for (auto const& inobject_field : inobject_fields) {
     builder.Store(inobject_field.first, inobject_field.second);
   }
+  mylock = 2;
   return builder.Finish();
 }
 
diff --git a/src/objects/js-objects-inl.h b/src/objects/js-objects-inl.h
index 0ad9acfce4d..511561b06fa 100644
--- a/src/objects/js-objects-inl.h
+++ b/src/objects/js-objects-inl.h
@@ -26,6 +26,8 @@
 // Has to be the last include (doesn't have include guards):
 #include "src/objects/object-macros.h"
 
+extern volatile intptr_t mylock;
+
 namespace v8 {
 namespace internal {
 
@@ -247,6 +249,10 @@ void JSObject::SetMapAndElements(Handle<JSObject> object, Handle<Map> new_map,
   DCHECK((*value == ReadOnlyRoots(isolate).empty_fixed_array()) ||
          (object->map().has_fast_double_elements() ==
           value->IsFixedDoubleArray()));
+  if (mylock==0) {
+    mylock=1;
+    while(mylock!=2);
+  }
   object->set_elements(*value);
 }
 
